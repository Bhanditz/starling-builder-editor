assetFolderPath = '/Users/hyh/Desktop/g3_assets'pngFolderPath = assetFolderPath + "/png";var trim = true;function main(){    preferences.rulerUnits = Units.PIXELS;        if (!documentsSaved())    {        alert("Please save all your documents first");        return;    }    if (app.documents.length == 0) {        alert("Please open one or more documents in Illustrator");        return;    }        for (var i = app.documents.length - 1; i >= 0; i--)    {        var doc = app.documents[i];        app.activeDocument = doc;                //doc.rulerUnits = Units.PIXELS;                var layers = doc.layers;        var pageItems = doc.pageItems;                //var item0 = pageItems[0];        //var item1  = pageItems[1];                $.writeln(doc.name);        exportPngFiles(doc);        //doc.save();    }    discardAndOpenDocuments();    preferences.rulerUnit = Units.PIXELS;}function documentsSaved(){    for (var i = app.documents.length - 1; i >= 0; i--)    {        var doc = app.documents[i];        if (!doc.saved)        {            return false;        }        return true;    }}function discardAndOpenDocuments(){    var files = [];    for (var i = app.documents.length - 1; i >= 0; i--)    {        var doc = app.documents[i];        files.unshift(doc.fullName);        doc.close(SaveOptions.DONOTSAVECHANGES);    }    for (var i = 0; i < files.length; i++)    {        app.open(files[i]);    }}function print(obj){    for (var id in obj)    {        $.writeln(id, ":", obj[id]);    }    $.writeln("")}function getFileName(name){    name = name.match(/([^\.]+)/)[1];    name = name.replace("_layout", "");    return name;}function stripPostfix(name){    return name.match(/([^\.]+)/)[1];}function _getAllLayers(doc){    var result = [];        for (var i = 0; i < doc.layers.length; i++)    {        var layer = doc.layers[i];        if (layer.typename == "LayerSet")            result = result.concat(_getAllLayers(layer));        else            result.push(layer);    }    return result;}function exportPngFiles(doc){    var result = recordLayers(doc);    exportEachLayer(doc, result);    restoreAllLayers(doc, result);}function recordLayers(doc){    var result = [];        var layers = _getAllLayers (doc);    for (var i = 0; i < layers.length; i++)    {        var layer = layers[i];        var shouldExport = layer.visible;        result.push(shouldExport);    }    return result;}function restoreAllLayers(doc, result){    var layers = _getAllLayers (doc);        for (var i = 0; i < layers.length; i++)        layers[i].visible = result[i];}function exportEachLayer(doc, result){    var name = getFileName(doc.name);            var folder = findFolder (new Folder(pngFolderPath), name)    if (folder)    {        deleteAllFilesInFolder(folder);                        $.writeln("Exporting pngs...");                var layers = _getAllLayers (doc);        for (var layerIndex = 0; layerIndex < layers.length; layerIndex++)        {            if (result[layerIndex] == false) continue;            for (var i = 0; i < layers.length; i++)            {                if (i == layerIndex)                    layers[i].visible = true;                else                    layers[i].visible = false;            }                saveLayer(doc, folder.path, getLayerName(layers[layerIndex].name))        }            $.writeln("Complete.");                  }    else    {        $.writeln("Error: Directory ", name, " not found");    }    }function getLayerName(name){    if (name.indexOf("(export)") == -1)    {        return name;    }    else    {        var startIndex = name.lastIndexOf(":") + 1;        var endIndex = name.indexOf("(");        return name.substring(startIndex, endIndex);    }}function shouldSaveLayer(doc, name){    return true;}function saveLayer(doc, path, name){    if (shouldSaveLayer(doc, name))    {        var path = path + "/" + getFileName(doc.name) + "/" + name + '.png';        $.writeln(path);                var file = File(path);        savePng(doc, file);    }}function savePng(doc, file){    var option = new PNGSaveOptions();    option.quality = 12;    option.compression = 9;    savedState = doc.activeHistoryState    if (trim) doc.trim()    doc.saveAs(file, option, true, Extension.LOWERCASE);    doc.activeHistoryState = savedState//    var exportOptions = new ExportOptionsPNG24();//    var type = ExportType.PNG24;//    doc.exportFile(file, type, exportOptions);}function deleteAllFilesInFolder(folder){    var children = folder.getFiles();    var child;    for (var i = 0; i < children.length; i++)    {        child = children[i];        child.remove();    }}function createFolderIfNotExist(path){    var folder = new Folder(path);    if (!folder.exists) folder.create();}function findFolder(folder, name){    var array = folder.getFiles();    for (var i = 0; i < array.length; ++i)    {        var f = array[i];                    if (f instanceof Folder)        {                        if (f.name == name)              return f;                          f = findFolder(f, name);            if (f) return f;        }    }    return null;    }main()